<?php

namespace AppBundle\Controller;

use AppBundle\Entity\Popo;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Serializer\Serializer;
use Symfony\Component\Serializer\Encoder\XmlEncoder;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\HttpFoundation\Response;
use Doctrine\ORM\EntityManager;
use AppBundle\Form\PopoType;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Form\Extension\Core\Type\FileType;



class DefaultController extends Controller
{
    /**
     * @Route("/", name="app_product_new")
     */
    public function indexAction(Request $request) {
        $csv = new Popo();
        $form = $this->createForm(PopoType::class, $csv);
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            // $Popo stores the uploaded PDF csv
            /** @var Symfony\Component\HttpFoundation\csv\UploadedPopo $Popo */
            $Popo = $csv->getPopo();

            $csvName = $this->generateUniquecsvName().'.'.$Popo->guessExtension();

            // moves the Popo to the directory where brochures are stored
            $Popo->move(
                $this->getParameter('Popo_directory'),
                $csvName
            );

            // updates the 'brochure' property to store the PDF Popo name
            // instead of its contents
            $csv->setPopo($csvName);
            $this->sendDB($csv->getPopo());
            // ... persist the $Popo variable or any other work

        }

        return $this->render('base.html.twig', array(
            'form' => $form->createView(),
        ));
    }

    /**
     *@Route("/", name="app_product_list")
     */
    public function sendDB($path) {
        $webPath = $this->get('kernel')->getRootDir().'/../web';
        $pop = file_get_contents($webPath . "/uploads/popo/" . $path);
        $tab = explode(PHP_EOL, $pop);
        $col = explode(";", $tab[0]);
        $rawSql = "CREATE TABLE `symfony`.`Proarti` (
        ID int NOT NULL AUTO_INCREMENT,
        `$col[0]` varchar(255),
        `$col[1]` varchar(255),
        `$col[2]` varchar(255),
        `$col[3]` varchar(255),
        `$col[4]` varchar(255),
        `$col[5]` varchar(255),
        PRIMARY KEY (ID))";
        $entityManager = $this->getDoctrine()->getManager()->getConnection()->prepare($rawSql);
        $entityManager->execute([]);
        array_shift($tab);
        array_pop($tab);
        $p = 20;
        foreach($tab as $value) {
            $données = explode(";", $value);
            $rawSql = "INSERT INTO Proarti VALUES (
            '$p',
            '$données[0]',
            '$données[1]',
            '$données[2]',
            '$données[3]',
            '$données[4]',
            '$données[5]')";
            $entityManager = $this->getDoctrine()->getManager()->getConnection()->prepare($rawSql);
            $entityManager->execute([]);
            $p++;
        }
        return $this->render('proarti/home.html.twig');
    }

    public  function json_return($data, $type ='object') {
        if ($type == 'array') {
            return  new Response(json_encode($data));
        } else {
            $encoders = array(new XmlEncoder(), new JsonEncoder());
            $normalizers = array(new ObjectNormalizer());        
            $serializer = new Serializer($normalizers, $encoders);
            $jsonContent = $serializer->serialize($data, 'json');
            
            return new Response($jsonContent);
        }
    }

    
    /**
     *@return string
     */
    private function generateUniquecsvName() {
        // md5() reduces the similarity of the csv names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}